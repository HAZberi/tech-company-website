[{"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\index.js":"1","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\App.js":"2","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Theme.js":"3","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\ui\\Header.js":"4","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\ui\\Footer.js":"5","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\svgToReact\\FooterAdornment.js":"6","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\svgToReact\\MobileFooterAdornment.js":"7","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\LandingPage.js":"8","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\animations\\landinganimation\\data.js":"9","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\ui\\ButtonArrow.js":"10","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\ui\\CallToAction.js":"11","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Services.js":"12","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Software.js":"13","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\animations\\documentsAnimation\\data.js":"14","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\animations\\uxAnimation\\data.js":"15","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\MobileApp.js":"16","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Websites.js":"17","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Revolution.js":"18","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\About.js":"19","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Contact.js":"20","C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Estimate.js":"21"},{"size":149,"mtime":1609932704463,"results":"22","hashOfConfig":"23"},{"size":4512,"mtime":1613553635873,"results":"24","hashOfConfig":"23"},{"size":2423,"mtime":1613560729123,"results":"25","hashOfConfig":"23"},{"size":16591,"mtime":1612449215441,"results":"26","hashOfConfig":"23"},{"size":10340,"mtime":1612445938393,"results":"27","hashOfConfig":"23"},{"size":1225,"mtime":1611704962711,"results":"28","hashOfConfig":"23"},{"size":1232,"mtime":1612111201979,"results":"29","hashOfConfig":"23"},{"size":16420,"mtime":1612107219622,"results":"30","hashOfConfig":"23"},{"size":3955,"mtime":1611810730694,"results":"31","hashOfConfig":"23"},{"size":429,"mtime":1611795513699,"results":"32","hashOfConfig":"23"},{"size":4430,"mtime":1613070251755,"results":"33","hashOfConfig":"23"},{"size":8087,"mtime":1612094638384,"results":"34","hashOfConfig":"23"},{"size":16540,"mtime":1612606099071,"results":"35","hashOfConfig":"23"},{"size":2771,"mtime":1612326566514,"results":"36","hashOfConfig":"23"},{"size":25435,"mtime":1612326509154,"results":"37","hashOfConfig":"23"},{"size":9860,"mtime":1612414108267,"results":"38","hashOfConfig":"23"},{"size":9691,"mtime":1612496554330,"results":"39","hashOfConfig":"23"},{"size":28191,"mtime":1612719910089,"results":"40","hashOfConfig":"23"},{"size":11324,"mtime":1612962933178,"results":"41","hashOfConfig":"23"},{"size":13948,"mtime":1613368231381,"results":"42","hashOfConfig":"23"},{"size":29229,"mtime":1613764945666,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},"163mq3",{"filePath":"47","messages":"48","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"53","messages":"54","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"55","messages":"56","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"57","messages":"58","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"59","messages":"60","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"61","messages":"62","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"63","messages":"64","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"75","messages":"76","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"77","messages":"78","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"81","messages":"82","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"83","messages":"84","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"46"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"87"},"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\index.js",[],["88","89"],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\App.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Theme.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\ui\\Header.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\ui\\Footer.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\svgToReact\\FooterAdornment.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\svgToReact\\MobileFooterAdornment.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\LandingPage.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\animations\\landinganimation\\data.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\ui\\ButtonArrow.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\ui\\CallToAction.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Services.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Software.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\animations\\documentsAnimation\\data.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\animations\\uxAnimation\\data.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\MobileApp.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Websites.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Revolution.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\About.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Contact.js",[],"C:\\Users\\User\\Desktop\\Web Developer\\Material-UI\\tech-company-website-part-1\\src\\components\\Estimate.js",["90","91","92","93","94","95","96","97","98","99"],"import React, { useState } from \"react\";\r\nimport Lottie from \"react-lottie\";\r\nimport { cloneDeep } from \"lodash\";\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport useMediaQuery from \"@material-ui/core/useMediaQuery\";\r\nimport Dialog from \"@material-ui/core/Dialog\";\r\nimport DialogContent from \"@material-ui/core/DialogContent\";\r\nimport DialogTitle from \"@material-ui/core/DialogTitle\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\n\r\nimport check from \"../assets/check.svg\";\r\nimport send from \"../assets/send.svg\";\r\nimport software from \"../assets/software.svg\";\r\nimport mobile from \"../assets/mobile.svg\";\r\nimport website from \"../assets/website.svg\";\r\nimport backArrow from \"../assets/backArrow.svg\";\r\nimport forwardArrow from \"../assets/forwardArrow.svg\";\r\nimport backArrowDisabled from \"../assets/backArrowDisabled.svg\";\r\nimport forwardArrowDisabled from \"../assets/forwardArrowDisabled.svg\";\r\nimport camera from \"../assets/camera.svg\";\r\nimport upload from \"../assets/upload.svg\";\r\nimport person from \"../assets/person.svg\";\r\nimport persons from \"../assets/persons.svg\";\r\nimport people from \"../assets/people.svg\";\r\nimport info from \"../assets/info.svg\";\r\nimport bell from \"../assets/bell.svg\";\r\nimport users from \"../assets/users.svg\";\r\nimport iphone from \"../assets/iphone.svg\";\r\nimport gps from \"../assets/gps.svg\";\r\nimport customized from \"../assets/customized.svg\";\r\nimport data from \"../assets/data.svg\";\r\nimport android from \"../assets/android.svg\";\r\nimport biometrics from \"../assets/biometrics.svg\";\r\nimport globe from \"../assets/globe.svg\";\r\n\r\nimport estimateAnimation from \"../animations/estimateAnimation/data.json\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  heading: {\r\n    paddingLeft: \"5em\",\r\n    paddingRight: \"5em\",\r\n    marginBottom: \"3em\",\r\n    marginTop: \"2em\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      paddingLeft: \"1.5em\",\r\n      paddingRight: \"1.5em\",\r\n      marginTop: \"1em\",\r\n      marginBottom: \"1em\",\r\n      textAlign: \"center\",\r\n    },\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      marginBottom: \"1.5em\",\r\n    },\r\n  },\r\n\r\n  icon: {\r\n    height: \"10em\",\r\n    width: \"10em\",\r\n  },\r\n  question: {\r\n    marginTop: \"5em\",\r\n    marginBottom: \"2em\",\r\n    [theme.breakpoints.down(\"md\")]: {\r\n      marginBottom: \"1.5em\",\r\n    },\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      marginTop: \"1em\",\r\n      marginBottom: \"1em\",\r\n    },\r\n  },\r\n  estimate: {\r\n    ...theme.typography.estimate,\r\n    borderRadius: \"30px\",\r\n    marginLeft: \"20px\",\r\n    marginRight: \"20px\",\r\n    height: \"45px\",\r\n    width: \"250px\",\r\n    marginTop: \"0.5rem\",\r\n    fontSize: \"1.35rem\",\r\n  },\r\n\r\n  placeRequest: {\r\n    ...theme.typography.estimate,\r\n    borderRadius: \"30px\",\r\n    marginLeft: \"20px\",\r\n    marginRight: \"20px\",\r\n    height: \"45px\",\r\n    width: \"200px\",\r\n    marginTop: \"0.5rem\",\r\n    fontSize: \"1.15rem\",\r\n  },\r\n  \r\n\r\n  arrowIcons: {\r\n    \"&:hover\": {\r\n      backgroundColor: \"transparent\",\r\n    },\r\n  },\r\n  estimateModalHeading: {\r\n    paddingLeft: \"2em\",\r\n    paddingRight: \"2em\",\r\n    marginTop: \"2em\",\r\n    paddingTop: 0,\r\n    paddingBottom: 0,\r\n    textAlign: \"center\",\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      width: \"80%\",\r\n      marginLeft: \"2em\",\r\n      marginRight: \"2em\",\r\n    },\r\n    [theme.breakpoints.down(\"xs\")]: {\r\n      width: \"100%\",\r\n      marginLeft: 0,\r\n      marginRight: 0,\r\n      paddingLeft: 0,\r\n      paddingRight: 0,\r\n    },\r\n  },\r\n  message: {\r\n    border: `2px solid ${theme.palette.common.orange}`,\r\n    marginTop: \"4em\",\r\n    borderRadius: \"5px\",\r\n  },\r\n  specialText: {\r\n    fontFamily: \"Raleway\",\r\n    fontWeight: 700,\r\n    fontSize: \"1.5rem\",\r\n    color: theme.palette.common.orange,\r\n  },\r\n}));\r\n\r\nconst defaultQuestions = [\r\n  {\r\n    id: 1,\r\n    title: \"Which service are you interested in?\",\r\n    subtitle: null,\r\n    active: true,\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Software Development\",\r\n        subtitle: null,\r\n        icon: software,\r\n        iconAlt: \"three floating screens\",\r\n        selected: false,\r\n        cost: 0,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"App Development\",\r\n        subtitle: null,\r\n        icon: mobile,\r\n        iconAlt: \"phones and tablet ouline\",\r\n        selected: false,\r\n        cost: 0,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Website Development\",\r\n        subtitle: null,\r\n        icon: website,\r\n        iconAlt: \"a computer screen outline\",\r\n        selected: false,\r\n        cost: 0,\r\n      },\r\n    ],\r\n  },\r\n];\r\n\r\nconst softwareQuestions = [\r\n  { ...defaultQuestions[0], active: false },\r\n  {\r\n    id: 2,\r\n    title: \"Which platforms do you need supported?\",\r\n    subtitle: \"Select all that apply.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Web Application\",\r\n        subtitle: null,\r\n        icon: website,\r\n        iconAlt: \"computer outline\",\r\n        selected: false,\r\n        cost: 2500,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"iOS Application\",\r\n        subtitle: null,\r\n        icon: iphone,\r\n        iconAlt: \"outline of iphone\",\r\n        selected: false,\r\n        cost: 3000,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Android Application\",\r\n        subtitle: null,\r\n        icon: android,\r\n        iconAlt: \"outlines of android phone\",\r\n        selected: false,\r\n        cost: 3000,\r\n      },\r\n    ],\r\n    active: true,\r\n  },\r\n  {\r\n    id: 3,\r\n    title: \"Which features do you expect to use?\",\r\n    subtitle: \"Select all that apply.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Photo/Video\",\r\n        subtitle: null,\r\n        icon: camera,\r\n        iconAlt: \"camera outline\",\r\n        selected: false,\r\n        cost: 500,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"GPS\",\r\n        subtitle: null,\r\n        icon: gps,\r\n        iconAlt: \"gps pin\",\r\n        selected: false,\r\n        cost: 2500,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"File Transfer\",\r\n        subtitle: null,\r\n        icon: upload,\r\n        iconAlt: \"outline of cloud with arrow pointing up\",\r\n        selected: false,\r\n        cost: 1000,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n  {\r\n    id: 4,\r\n    title: \"Which features do you expect to use?\",\r\n    subtitle: \"Select all that apply.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Users Authentication\",\r\n        subtitle: null,\r\n        icon: users,\r\n        iconAlt: \"outline of a person with a plus sign\",\r\n        selected: false,\r\n        cost: 500,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Biometrics\",\r\n        subtitle: null,\r\n        icon: biometrics,\r\n        iconAlt: \"fingerprint\",\r\n        selected: false,\r\n        cost: 750,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"Push Notifications\",\r\n        subtitle: null,\r\n        icon: bell,\r\n        iconAlt: \"outline of a bell\",\r\n        selected: false,\r\n        cost: 1500,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n  {\r\n    id: 5,\r\n    title: \"What type of custom features do you expect to need?\",\r\n    subtitle: \"Select one.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Low Complexity\",\r\n        subtitle: \"(Informational)\",\r\n        icon: info,\r\n        iconAlt: \"'i' inside a circle\",\r\n        selected: false,\r\n        cost: 500,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Medium Complexity\",\r\n        subtitle: \"(Interactive, Customizable, Realtime)\",\r\n        icon: customized,\r\n        iconAlt: \"two toggle switches\",\r\n        selected: false,\r\n        cost: 2000,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"High Complexity\",\r\n        subtitle: \"(Data Modeling and Computation)\",\r\n        icon: data,\r\n        iconAlt: \"outline of line graph\",\r\n        selected: false,\r\n        cost: 5000,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n  {\r\n    id: 6,\r\n    title: \"How many users do you expect?\",\r\n    subtitle: \"Select one.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"0-10\",\r\n        subtitle: null,\r\n        icon: person,\r\n        iconAlt: \"person outline\",\r\n        selected: false,\r\n        cost: 1,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"10-100\",\r\n        subtitle: null,\r\n        icon: persons,\r\n        iconAlt: \"outline of two people\",\r\n        selected: false,\r\n        cost: 1.25,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"100+\",\r\n        subtitle: null,\r\n        icon: people,\r\n        iconAlt: \"outline of three people\",\r\n        selected: false,\r\n        cost: 1.5,\r\n      },\r\n    ],\r\n    active: false,\r\n  },\r\n];\r\n\r\nconst websiteQuestions = [\r\n  { ...defaultQuestions[0], active: false },\r\n  {\r\n    id: 2,\r\n    title: \"Which type of website are you wanting?\",\r\n    subtitle: \"Select one.\",\r\n    options: [\r\n      {\r\n        id: 1,\r\n        title: \"Basic\",\r\n        subtitle: \"(Informational)\",\r\n        icon: info,\r\n        iconAlt: \"person outline\",\r\n        selected: false,\r\n        cost: 1000,\r\n      },\r\n      {\r\n        id: 2,\r\n        title: \"Interactive\",\r\n        subtitle: \"(Users, API's, Messaging)\",\r\n        icon: customized,\r\n        iconAlt: \"outline of two people\",\r\n        selected: false,\r\n        cost: 2500,\r\n      },\r\n      {\r\n        id: 3,\r\n        title: \"E-Commerce\",\r\n        subtitle: \"(Sales)\",\r\n        icon: globe,\r\n        iconAlt: \"outline of three people\",\r\n        selected: false,\r\n        cost: 5000,\r\n      },\r\n    ],\r\n    active: true,\r\n  },\r\n];\r\n\r\nconst Estimate = (props) => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const smaller = useMediaQuery(theme.breakpoints.down(\"sm\"));\r\n  const medium = useMediaQuery(theme.breakpoints.down(\"md\"));\r\n  const smallest = useMediaQuery(theme.breakpoints.down(\"xs\"));\r\n\r\n  const [questions, setQuestions] = useState(defaultQuestions);\r\n\r\n  const [open, setOpen] = useState(false);\r\n  const [name, setName] = useState(\"\");\r\n  const [nameHelperText, setNameHelperText] = useState(\"\");\r\n  const [email, setEmail] = useState(\"\");\r\n  const [emailHelperText, setEmailHelperText] = useState(\"\");\r\n  const [phone, setPhone] = useState(\"\");\r\n  const [phoneHelperText, setPhoneHelperText] = useState(\"\");\r\n  const [message, setMessage] = useState(\"\");\r\n\r\n  const [estimate, setEstimate] = useState(0);\r\n\r\n  const [service, setService] = useState([]);\r\n  const [platforms, setPlatforms] = useState([]);\r\n  const [features, setFeatures] = useState([]);\r\n  const [customFeatures, setCustomFeatures] = useState(\"\");\r\n  const [category, setCategory] = useState(\"\");\r\n  const [users, setUsers] = useState(\"\");\r\n\r\n  const defaultOptions = {\r\n    loop: true,\r\n    autoplay: true,\r\n    animationData: estimateAnimation,\r\n    rendererSettings: {\r\n      preserveAspectRatio: \"xMidYMid slice\",\r\n    },\r\n  };\r\n\r\n  const nextQuestion = () => {\r\n    //creating a deep copy of state Questions to keep the state immutable\r\n    const updatedQuestions = cloneDeep(questions);\r\n    //filtering out the currently active question\r\n    const activeQuestion = updatedQuestions.filter(\r\n      (question) => question.active\r\n    );\r\n    //Getting index of active question\r\n    const activeQuestionIndex = activeQuestion[0].id - 1;\r\n    //Getting next question index\r\n    const nextQuestionIndex = activeQuestionIndex + 1;\r\n    //setting active question to false\r\n    updatedQuestions[activeQuestionIndex] = {\r\n      ...activeQuestion[0],\r\n      active: false,\r\n    };\r\n    //setting next question to true\r\n    updatedQuestions[nextQuestionIndex] = {\r\n      ...updatedQuestions[nextQuestionIndex],\r\n      active: true,\r\n    };\r\n    //Finally Update the question structure in state\r\n    setQuestions(updatedQuestions);\r\n  };\r\n\r\n  const nextQuestionDisabled = () => {\r\n    //Filter out the currently active question\r\n    const activeQuestion = questions.filter((question) => question.active);\r\n    //Check if active question id is the last id in the questions array and return true\r\n    if (activeQuestion[0].id === questions[questions.length - 1].id)\r\n      return true;\r\n    //Under all other circumstances we need to enable question navigation\r\n    return false;\r\n  };\r\n\r\n  const previousQuestion = () => {\r\n    //creating a deep copy of state Questions to keep the state immutable\r\n    const updatedQuestions = cloneDeep(questions);\r\n    //filtering out the currently active question\r\n    let activeQuestion = updatedQuestions.filter((question) => question.active);\r\n    //Getting index of active question\r\n    const activeQuestionIndex = activeQuestion[0].id - 1;\r\n    //Getting next question index\r\n    const previousQuestionIndex = activeQuestionIndex - 1;\r\n    //setting active question to false\r\n    updatedQuestions[activeQuestionIndex] = {\r\n      ...activeQuestion[0],\r\n      active: false,\r\n    };\r\n    //setting next question to true\r\n    updatedQuestions[previousQuestionIndex] = {\r\n      ...updatedQuestions[previousQuestionIndex],\r\n      active: true,\r\n    };\r\n    //Finally Update the question structure in state\r\n    setQuestions(updatedQuestions);\r\n\r\n    //if we need to restrict user to select only one type of service\r\n    //its kind of a reset function for question\r\n    //Without this block of code user can still go back n forth between questions even after going back to first question\r\n    // activeQuestion = updatedQuestions.filter(\r\n    //   (question) => question.active\r\n    // );\r\n    // if(activeQuestion[0].title === 'Which service are you interested in?'){\r\n    //   setQuestions(defaultQuestions);\r\n    // }\r\n  };\r\n\r\n  const previousQuestionDisabled = () => {\r\n    //Filter out the currently active question\r\n    const activeQuestion = questions.filter((question) => question.active);\r\n    //Check if active question id is the first id in the questions array and return true\r\n    if (activeQuestion[0].id === questions[0].id) return true;\r\n    //Under all other circumstances we need to enable question navigation\r\n    return false;\r\n  };\r\n\r\n  const handleOptionSelection = (id) => {\r\n    //creating a deep copy of state Questions to keep the state immutable\r\n    const updatedQuestions = cloneDeep(questions);\r\n    //filtering out the active question\r\n    const activeQuestion = updatedQuestions.filter(\r\n      (question) => question.active\r\n    );\r\n    //Getting the index of currently active question\r\n    const activeQuestionIndex = activeQuestion[0].id - 1;\r\n    //Getting the selected option from currently active question using the option id input parameter\r\n    const selectedOption =\r\n      updatedQuestions[activeQuestionIndex].options[id - 1];\r\n    //Getting the previous selected option from currently active question and filter for any other options seleted\r\n    const previouslySelectedOption = activeQuestion[0].options.filter(\r\n      (option) => option.selected\r\n    );\r\n    //switch over active question subtitle to find whether single or multiple questions needed to be selected.\r\n    switch (activeQuestion[0].subtitle) {\r\n      //The case where only one option can be seleted at a time\r\n      case \"Select one.\":\r\n        //Check if there is any already or previously selected option exist\r\n        //if condition is true => toggle the previously selected option\r\n        if (previouslySelectedOption[0])\r\n          previouslySelectedOption[0].selected = !previouslySelectedOption[0]\r\n            .selected;\r\n        //if there is no previously selected option then Toggle the options currently selected property\r\n        selectedOption.selected = !selectedOption.selected;\r\n        break;\r\n      default:\r\n        //In all other cases user can select multiple options, so toggle selection\r\n        selectedOption.selected = !selectedOption.selected;\r\n        break;\r\n    }\r\n    //switch over selected option title to find which set of questions should be shown to the user\r\n    switch (selectedOption.title) {\r\n      //if selected option title matches the swtich case => question state is updated to show relevant questions\r\n      case \"Software Development\":\r\n        setQuestions(softwareQuestions);\r\n        setService('Software Development');\r\n        break;\r\n      case \"App Development\":\r\n        setQuestions(softwareQuestions);\r\n        setService('App Development');\r\n        break;\r\n      case \"Website Development\":\r\n        setQuestions(websiteQuestions);\r\n        setService('Website Development');\r\n        break;\r\n      default:\r\n        //if selected option title doesnt match any switch case then we will simply update the question\r\n        setQuestions(updatedQuestions);\r\n        break;\r\n    }\r\n  };\r\n\r\n  const onFieldInputChange = (event) => {\r\n    let valid;\r\n    switch (event.target.id) {\r\n      case \"name\":\r\n        setName(event.target.value);\r\n        if (event.target.value !== \"\") {\r\n          valid = /^[a-z ,.'-]+$/i.test(event.target.value);\r\n          if (!valid) {\r\n            setNameHelperText(\r\n              `Cannot include numbers, brackets and special characters`\r\n            );\r\n          } else {\r\n            setNameHelperText(\"\");\r\n          }\r\n        } else {\r\n          setNameHelperText(\"\");\r\n        }\r\n        break;\r\n      case \"email\":\r\n        setEmail(event.target.value);\r\n        if (event.target.value !== \"\") {\r\n          valid = /^\\w+([.-]?\\w+)*@\\w+([.-]?\\w+)*(\\.\\w{2,3})+$/.test(\r\n            event.target.value\r\n          );\r\n          if (!valid) {\r\n            setEmailHelperText(\"Invalid email.\");\r\n          } else {\r\n            setEmailHelperText(\"\");\r\n          }\r\n        } else {\r\n          setEmailHelperText(\"\");\r\n        }\r\n\r\n        break;\r\n      case \"phone\":\r\n        setPhone(event.target.value);\r\n        if (event.target.value !== \"\") {\r\n          valid = /^\\(?([0-9]{3})\\)?[-. ]?([0-9]{3})[-. ]?([0-9]{4})$/.test(\r\n            event.target.value\r\n          );\r\n          if (!valid) {\r\n            setPhoneHelperText(\"Invalid Phone Number\");\r\n          } else {\r\n            setPhoneHelperText(\"\");\r\n          }\r\n        } else {\r\n          setPhoneHelperText(\"\");\r\n        }\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  const calculateCost = () => {\r\n    //declaring a cost counter\r\n    let cost = 0;\r\n    //Filter out the questions that are answered with at least one option selected\r\n    const selections = questions\r\n      .map((question) => question.options.filter((option) => option.selected))\r\n      .filter((question) => question.length !== 0);\r\n    //aggregating cost from the selected option to the cost counter\r\n    selections.map((options) => options.map((option) => (cost += option.cost)));\r\n    //Note: The question \"How many users do you expect?\" doesnt have a cost\r\n    //It only has a multiplyer as a cost property. So we need to subtract the multiplyer\r\n    //from the cost calculated in the above step\r\n\r\n    //Website Questions have only 2 questions and doesnt have \"How many users do you expect?\"\r\n    if (questions.length > 2) {\r\n      //Filtering out the multiplyer from \"How many users do you expect?\"\r\n      //if user don't choose any option from \"How many users do you expect?\" then\r\n      //userCostMultiplyer should return undefined\r\n      const usersCostMultiplyer = questions\r\n        .filter(\r\n          (question) => question.title === \"How many users do you expect?\"\r\n        )[0]\r\n        .options.filter((option) => option.selected)[0]?.cost;\r\n      //userCostMultiplyer is not undefined subtract multiplyer from cost\r\n      //and multiply the remaining cost with multiplyer\r\n      if (usersCostMultiplyer) {\r\n        cost -= usersCostMultiplyer;\r\n        cost *= usersCostMultiplyer;\r\n      }\r\n    }\r\n    //Finally set the estimated cost state\r\n    setEstimate(cost);\r\n  };\r\n\r\n  return (\r\n    <Grid container direction=\"row\" style={{ marginBottom: \"10em\" }}>\r\n      <Grid item container direction=\"column\" md>\r\n        <Grid item className={classes.heading}>\r\n          <Typography variant=\"h2\">Estimate</Typography>\r\n        </Grid>\r\n        <Grid\r\n          item\r\n          style={{\r\n            marginTop: smaller ? 0 : medium ? \"9em\" : \"7em\",\r\n            marginBottom: smaller ? 0 : \"5em\",\r\n            height: smallest ? \"10em\" : smaller ? \"17.5em\" : \"auto\",\r\n            marginRight: smaller ? \"0\" : \"7.5em\",\r\n            maxWidth: smaller ? \"100%\" : \"40em\",\r\n          }}\r\n        >\r\n          <Lottie options={defaultOptions} height=\"100%\" width=\"100%\" />\r\n        </Grid>\r\n      </Grid>\r\n      <Grid item container direction=\"column\" md>\r\n        {questions\r\n          .filter((question) => question.active)\r\n          .map((question, index) => (\r\n            <React.Fragment key={index}>\r\n              <Grid item className={classes.question}>\r\n                <Typography variant=\"h4\" align=\"center\">\r\n                  {question.title}\r\n                </Typography>\r\n                <Typography variant=\"subtitle1\" align=\"center\" gutterBottom>\r\n                  {question.subtitle}\r\n                </Typography>\r\n              </Grid>\r\n              <Grid item container>\r\n                {question.options.map((option, i) => (\r\n                  <React.Fragment key={i}>\r\n                    <Grid\r\n                      item\r\n                      container\r\n                      alignItems=\"center\"\r\n                      //here we converted regular button component to display data in a grid !important styling\r\n                      style={{\r\n                        marginTop: smallest && i !== 0 ? \"4em\" : \"2em\",\r\n                        textTransform: \"none\",\r\n                        display: \"grid\",\r\n                        backgroundColor: option.selected\r\n                          ? theme.palette.common.orange\r\n                          : null,\r\n                        borderRadius: 0,\r\n                      }}\r\n                      component={Button}\r\n                      onClick={() => handleOptionSelection(option.id)}\r\n                      direction=\"column\"\r\n                      sm\r\n                    >\r\n                      <Grid item>\r\n                        <img\r\n                          src={option.icon}\r\n                          alt={option.iconAlt}\r\n                          className={classes.icon}\r\n                        />\r\n                      </Grid>\r\n                      <Grid\r\n                        item\r\n                        style={{ maxWidth: \"10em\", marginTop: \"0.5em\" }}\r\n                      >\r\n                        <Typography variant=\"h6\" align=\"center\">\r\n                          {option.title}\r\n                        </Typography>\r\n                        <Typography variant=\"caption\" align=\"center\">\r\n                          {option.subtitle}\r\n                        </Typography>\r\n                      </Grid>\r\n                    </Grid>\r\n                  </React.Fragment>\r\n                ))}\r\n              </Grid>\r\n            </React.Fragment>\r\n          ))}\r\n        <Grid\r\n          container\r\n          direction=\"row\"\r\n          justify=\"space-around\"\r\n          style={{ marginTop: \"3em\", marginBottom: \"2.5em\" }}\r\n        >\r\n          <Grid item>\r\n            <IconButton\r\n              className={classes.arrowIcons}\r\n              onClick={previousQuestion}\r\n              disabled={previousQuestionDisabled()}\r\n            >\r\n              <img\r\n                src={previousQuestionDisabled() ? backArrowDisabled : backArrow}\r\n                alt=\"Previous question\"\r\n              />\r\n            </IconButton>\r\n          </Grid>\r\n          <Grid item>\r\n            <IconButton\r\n              className={classes.arrowIcons}\r\n              onClick={nextQuestion}\r\n              disabled={nextQuestionDisabled()}\r\n            >\r\n              <img\r\n                src={\r\n                  nextQuestionDisabled() ? forwardArrowDisabled : forwardArrow\r\n                }\r\n                alt=\"Next question\"\r\n              />\r\n            </IconButton>\r\n          </Grid>\r\n        </Grid>\r\n        <Grid item align=\"center\" style={{ marginTop: \"3em\" }}>\r\n          <Button\r\n            variant=\"contained\"\r\n            color=\"secondary\"\r\n            className={classes.estimate}\r\n            onClick={() => {\r\n              setOpen(true);\r\n              calculateCost();\r\n            }}\r\n          >\r\n            Get Estimate\r\n          </Button>\r\n        </Grid>\r\n      </Grid>\r\n      <Dialog\r\n        open={open}\r\n        onClose={() => setOpen(false)}\r\n        aria-labelledby=\"estimate-modal-title\"\r\n        fullScreen={smallest ? true : false}\r\n        style={{ zIndex: 1302, }}\r\n        maxWidth={smaller ? 'sm': 'lg'}\r\n      >\r\n        <DialogTitle\r\n          id=\"estimate-modal-title\"\r\n          className={classes.estimateModalHeading}\r\n          disableTypography\r\n        >\r\n          <Typography variant=\"h4\">Estimate</Typography>\r\n        </DialogTitle>\r\n        <DialogContent>\r\n          <Grid container>\r\n            <Grid item container direction=\"column\" md={7} style={{maxWidth: \"35em\"}}>\r\n              <Grid item style={{ width: \"100%\", marginTop: \"0.5em\" }}>\r\n                <TextField\r\n                  label=\"Name\"\r\n                  id=\"name\"\r\n                  error={nameHelperText.length !== 0}\r\n                  helperText={nameHelperText}\r\n                  value={name}\r\n                  onChange={onFieldInputChange}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item style={{ width: \"100%\", marginTop: \"0.5em\" }}>\r\n                <TextField\r\n                  label=\"Email\"\r\n                  id=\"email\"\r\n                  error={emailHelperText.length !== 0}\r\n                  helperText={emailHelperText}\r\n                  value={email}\r\n                  onChange={onFieldInputChange}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item style={{ width: \"100%\", marginTop: \"0.5em\" }}>\r\n                <TextField\r\n                  label=\"Phone\"\r\n                  id=\"phone\"\r\n                  error={phoneHelperText.length !== 0}\r\n                  helperText={phoneHelperText}\r\n                  value={phone}\r\n                  onChange={onFieldInputChange}\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item style={{ width: \"100%\" }}>\r\n                <TextField\r\n                  InputProps={{ disableUnderline: true }}\r\n                  id=\"message\"\r\n                  rows={6}\r\n                  value={message}\r\n                  className={classes.message}\r\n                  style={{ marginTop: \"2em\" }}\r\n                  onChange={(e) => setMessage(e.target.value)}\r\n                  multiline\r\n                  fullWidth\r\n                />\r\n              </Grid>\r\n              <Grid item style={{ marginTop: \"1.5em\" }}>\r\n                <Typography variant=\"body1\" paragraph>\r\n                  We can create this digital solution for an estimated{\" \"}\r\n                  <span className={classes.specialText}>\r\n                    ${estimate.toFixed(2)}\r\n                  </span>\r\n                  .\r\n                </Typography>\r\n                <Typography variant=\"body1\" paragraph>\r\n                  Fill out your name, phone number and email to place your\r\n                  request, and we'll get back to you with details moving forward\r\n                  and a final price.\r\n                </Typography>\r\n              </Grid>\r\n            </Grid>\r\n            <Grid item container direction=\"column\" alignItems=\"center\" md={5} style={{paddingLeft: \"2em\"}}>\r\n              <Grid item>\r\n                <Grid container direction=\"column\">\r\n                  <Grid item container direction=\"row\" alignItems=\"center\">\r\n                    <Grid item>\r\n                      <img src={check} alt=\"checkmark\" style={{paddingRight: \"0.5em\"}}/>\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\">You want {service}</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"row\" alignItems=\"center\">\r\n                    <Grid item>\r\n                      <img src={check} alt=\"checkmark\" />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\">You want service</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                  <Grid item container direction=\"row\" alignItems=\"center\">\r\n                    <Grid item>\r\n                      <img src={check} alt=\"checkmark\" />\r\n                    </Grid>\r\n                    <Grid item>\r\n                      <Typography variant=\"body1\">You want XYZ service</Typography>\r\n                    </Grid>\r\n                  </Grid>\r\n                </Grid>\r\n              </Grid>\r\n              <Grid item>\r\n                <Button variant=\"contained\" color=\"secondary\" className={classes.placeRequest}>\r\n                  Place Request\r\n                  <img src={send} alt=\"airplane\" style={{marginLeft: \"10px\"}} />\r\n                </Button>\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n        </DialogContent>\r\n      </Dialog>\r\n    </Grid>\r\n  );\r\n};\r\n\r\nexport default Estimate;\r\n",{"ruleId":"100","replacedBy":"101"},{"ruleId":"102","replacedBy":"103"},{"ruleId":"104","severity":1,"message":"105","line":413,"column":10,"nodeType":"106","messageId":"107","endLine":413,"endColumn":19},{"ruleId":"104","severity":1,"message":"108","line":413,"column":21,"nodeType":"106","messageId":"107","endLine":413,"endColumn":33},{"ruleId":"104","severity":1,"message":"109","line":414,"column":10,"nodeType":"106","messageId":"107","endLine":414,"endColumn":18},{"ruleId":"104","severity":1,"message":"110","line":414,"column":20,"nodeType":"106","messageId":"107","endLine":414,"endColumn":31},{"ruleId":"104","severity":1,"message":"111","line":415,"column":10,"nodeType":"106","messageId":"107","endLine":415,"endColumn":24},{"ruleId":"104","severity":1,"message":"112","line":415,"column":26,"nodeType":"106","messageId":"107","endLine":415,"endColumn":43},{"ruleId":"104","severity":1,"message":"113","line":416,"column":10,"nodeType":"106","messageId":"107","endLine":416,"endColumn":18},{"ruleId":"104","severity":1,"message":"114","line":416,"column":20,"nodeType":"106","messageId":"107","endLine":416,"endColumn":31},{"ruleId":"104","severity":1,"message":"115","line":417,"column":10,"nodeType":"106","messageId":"107","endLine":417,"endColumn":15},{"ruleId":"104","severity":1,"message":"116","line":417,"column":17,"nodeType":"106","messageId":"107","endLine":417,"endColumn":25},"no-native-reassign",["117"],"no-negated-in-lhs",["118"],"no-unused-vars","'platforms' is assigned a value but never used.","Identifier","unusedVar","'setPlatforms' is assigned a value but never used.","'features' is assigned a value but never used.","'setFeatures' is assigned a value but never used.","'customFeatures' is assigned a value but never used.","'setCustomFeatures' is assigned a value but never used.","'category' is assigned a value but never used.","'setCategory' is assigned a value but never used.","'users' is assigned a value but never used.","'setUsers' is assigned a value but never used.","no-global-assign","no-unsafe-negation"]